# Preguntas
--------------------------------------------------------------------------------------------------------------------------------------
## Abstracción de los tests 01 y 02 

En los test 01 y 02 hay código repetido. Cuando lo extrajeron crearon algo nuevo. Eso es algo que estaba en la realidad y no estaba representado en nuestro código, por eso teníamos código repetido. ¿Cuál es esa entidad de la realidad que crearon?

--------------------------------------------------------------------------------------------------------------------------------------

La abstraccion faltante que notamos, fue que era necesario modelar el tiempo que se demoraba en agregar o remover un customer.
Inicialmente al ver los tests 01 y 02 se nos ocurrio crear la clase ValidTime la cual se encargaria de tener sus propios mensajes
( addingTime, removingTime, totalExecutionTime ) y modular el calculo que se hacia en el test dado que no era una responsabilidad propia
de la clase CostumerBookTest. Sin embargo al conseguir ya un mensaje existente e implementado en Smalltalk el cual calcula exactamente
lo que queriamos, para "evitar reinventar la rueda" y por lo que ya leimos en el paper de Ingalls sobre los principos del disenio de
Smalltalk, la ultilizamos y nos ahorramos de crear algo que ya existia. 


--------------------------------------------------------------------------------------------------------------------------------------
## Cómo representar en Smalltalk

¿Cuáles son las formas en que podemos representar entes de la realidad en Smalltalk que conocés? Es decir, ¿qué cosas del lenguaje Smalltalk puedo usar para representar entidades de la realidad?

--------------------------------------------------------------------------------------------------------------------------------------
Los objetos y las clases son las formas que nos brinda Smalltalk para modelar la realidad/entes de la realidad. Por un lado tenemos las
clases que nos permiten representar las IDEAS o conceptos abstractos, mientras que los objetos nos permiten representar entes un objetos
concretos de la realidad.

Por ejemplo, podemos tener LA idea de "silla", y a su vez, podemos tener determinadas sillas concretas, que comparten entre si el hecho
de asociarse con el concepto de silla aunque las mismas sean completamente diferentes en forma, tipo o color, entre otros ejemplos.


--------------------------------------------------------------------------------------------------------------------------------------

## Teoría de Naur

¿Qué relación hay entre sacar código repetido (creando abstracciones) y la teoría del modelo/sistema (del paper de Naur)?

--------------------------------------------------------------------------------------------------------------------------------------

La idea de tener un codigo con las abstracciones del comportamiento de un objeto de manera correcta y clara da una efectiva informacion
acerca de como realmente esta conformada nuestra realidad. Al haber codigo repetido, no solamente no estamos dando un modelo del todo
claro, sino que ademas da cuenta de que nos hacen falta niveles de abstraccion para poder representar la realidad que nos rodea de
una manera mas especifica y veridica.

Como se habla en el paper de Naur, el programador debe ser capaz de estar conocer profundamente el dominio de problema a tal punto de
poder generar su propia teoria de manera tal de poder construir una buena solucion con una estructura y las abstracciones
correspondientes, para evitar repeticiones y poder reutilizar el codigo y los conceptos que el mismo representa.




--------------------------------------------------------------------------------------------------------------------------------------
